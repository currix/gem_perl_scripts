#!/usr/bin/perl
#
# Perl script to 
#
# by Currix TM
#
use strict;
use warnings;
#
use Getopt::Std;
# Switches:
my %options;
getopts("hvt",\%options);
###
(my $prgname) = $0 =~ m#.*/(.+$)#;
###
my $usemessage = <<"EOF";

 Usage: $prgname [-hv] [-t] min_year max_year filename

 Options:
          t : total production (journal articles plus other pubs)
          h : help message
          v : debugging output


EOF
###
my $latex_article_entry = <<'EOF';
\hline
\multicolumn{2}{|l|}{\textbf{\arabic{pub_rev}.}\stepcounter{pub_rev}} \\
\hline
\textbf{Autores (p.o. de firma):} &  \parbox[t]{0.77\linewidth}{AUTHORS} \\
\hline
\textbf{Título del artículo:} &  \parbox[t]{0.77\linewidth}{TITLE} \\
\hline
\textbf{Revista (abreviada):} &  \parbox[t]{0.77\linewidth}{JOURNAL} \\
\hline
\textbf{Año:} & YEAR \\
\hline
\textbf{Volumen:} & VOLUME \\
\hline
\textbf{Páginas (inicial-final):} & PAGES \hfill\begin{tabular}{|l|l}\textbf{Citas:} & CIT\end{tabular}\\
EOF
###
my $latex_other_entry = <<'EOF';
\hline
\multicolumn{2}{|l|}{\textbf{\arabic{pub_rev}.}\stepcounter{pub_rev}} \\
\hline
\textbf{Autores (p.o. de firma):} &  \parbox[t]{0.77\linewidth}{AUTHORS} \\
\hline
\textbf{Título del trabajo:} &  \parbox[t]{0.77\linewidth}{TITLE} \\
\hline
\textbf{Publicación:} &  \parbox[t]{0.77\linewidth}{JOURNAL} \\
\hline
\textbf{Título de la serie:} &  \parbox[t]{0.77\linewidth}{EVENT} \\
\hline
\textbf{Año:} & YEAR \\
\hline
\textbf{Volumen:} & VOLUME \\
\hline
\textbf{Páginas (inicial-final):} & PAGES \hfill\begin{tabular}{|l|l}\textbf{Citas:} & CIT\end{tabular}\\
EOF
##
die "\tPerl script to sort the list of bibtex publications from Endnote in file filename from min_year to max_year\n
     by Currix TM\n\n$usemessage" if ($options{"h"});
###
my ($min_year, $max_year, $filename);
if ($#ARGV < 2 ) {
  die "$usemessage\n\tNeeds arguments  min_year, max_year, and filename.\n\n";
} else {
  # Assign arguments to variables...
  ($min_year, $max_year, $filename) = @ARGV;
}
###
my @articles;
my @others;
my @total_prod;
### Open WoS input file
open(BIBFILE, "<$filename") or die "Cannot open file $filename...\n";
###
my $ident_art;
my $number_arts = 0;		# Counter and Key for articles
my $ident_other;
my $number_others = 0;		# Counter and Key for others
#
my $field_id;			# Field identifier
my $pub_id;                     # Item identifier ("journal" or "other")
###
while (<BIBFILE>) {
  ###
  chomp;
  #
  # skip empty lines
  next if (/^\s*$/);
  ##########
  ## Headers
  ##########
  if (/^PT\s+J/) {
    # Article case
    $ident_art = 1;
    $number_arts++;
    print "Article $number_arts starts here...\n" if ($options{"v"});
    $pub_id = "journal";
    ${$articles[$number_arts-1]}{"TY"} = $pub_id;
    next;
  } elsif (/^PT\s+(\w)/) {
    # Other case
    $ident_other = 1;
    $number_others++;
    print "Other $number_others key $1 starts here...\n" if ($options{"v"});
    $pub_id = "other";
    ${$others[$number_others-1]}{"TY"} = $pub_id;
    next
  }
  ###########
  ## EOR case
  ###########
  if (/^ER\s*$/) {
    print "Record ends here...\n" if ($options{"v"});
    $ident_art = 0;
    $ident_other = 0;
    next;
  }
  ################
  ## Entry reading
  ###############
  if ($ident_art) {
    print "Reading article $number_arts\n" if ($options{"v"});
    &read_items(\%{$articles[$number_arts-1]}, $_);
  } elsif ($ident_other) {
    print "Reading other $number_others\n" if ($options{"v"});
    &read_items(\%{$others[$number_others-1]}, $_);
  }
}
#
print "A total of $number_arts articles and $number_others others have been processed.\n" if ($options{"v"});
###
# Remove articles and other not in the requested period
my @articles_timespan;
my @others_timespan;
my @total_prod_timespan;
#
unless  ($options{"t"}) {
  @articles_timespan = grep {(${$articles[$_]}{"PY"}<= $max_year) & (${$articles[$_]}{"PY"} >= $min_year)} (0..$number_arts-1);
  @others_timespan = grep {(${$others[$_]}{"PY"}<= $max_year) & (${$others[$_]}{"PY"} >= $min_year)} (0..$number_others-1);
}
#
# Merge if all the output is needed
if ($options{"t"}) {
  @total_prod= @articles;
  push(@total_prod, @others);
  @total_prod_timespan = grep {(${$total_prod[$_]}{"PY"}<= $max_year) & (${$total_prod[$_]}{"PY"} >= $min_year)} (0..$number_others+$number_arts-1);}
########################################################
## Sort according to publication year and times cited
#
my @total_prod_sorted;
my @articles_sorted;
my @others_sorted;
if ($options{"t"}) {
  @total_prod_sorted = sort {${$total_prod[$b]}{"PY"} <=> ${$total_prod[$a]}{"PY"} or ${$total_prod[$b]}{"TC"} <=> ${$total_prod[$a]}{"TC"}} @total_prod_timespan;
} else {
  ###
  # Sort articles according to publication year and times cited
  @articles_sorted = sort {${$articles[$b]}{"PY"} <=> ${$articles[$a]}{"PY"} or ${$articles[$b]}{"TC"} <=> ${$articles[$a]}{"TC"}} @articles_timespan;
  #
  # Sort items according to publication year and times cited
  @others_sorted = sort {${$others[$b]}{"PY"} <= ${$others[$a]}{"PY"} or ${$others[$b]}{"TC"} <= ${$others[$a]}{"TC"}} @others_timespan;
  #
}
##########################################################
# Prepare LaTeX Output
if ($options{"t"}) {
  print "%%%%%%%%%%%%%%%%%%%%%%%% Total Scientific Production %%%%%%%%%%%%%%%%%%%%%%%%%%%\n";
  foreach my $index (@total_prod_sorted) {
    print "Processing item $index\n" if ($options{"v"});
    if (${$total_prod[$index]}{"TY"} eq "journal") {
      print &prepare_article_entry(\%{$total_prod[$index]});
    } else {
      print &prepare_other_entry(\%{$total_prod[$index]});
    }
  }
} else {
  print "%%%%%%%%%%%%%%%%%%%%%%%% Articles %%%%%%%%%%%%%%%%%%%%%%%%%%%\n";
  foreach my $index (@articles_sorted) {
    print "Processing article $index\n" if ($options{"v"});
    print &prepare_article_entry(\%{$articles[$index]});
  }
  print "%%%%%%%%%%%%%%%%%%%%%%%% Others %%%%%%%%%%%%%%%%%%%%%%%%%%%\n";
  foreach my $index (@others_sorted) {
    print "Processing item $index\n" if ($options{"v"});
    print &prepare_other_entry(\%{$others[$index]});
  }
}
#################################################################
sub read_items {
  #
  my ($hash_ref, $line) = @_;
  #
  if ($line =~ /^(\w+)\s+(.*)$/) { # Check if there is a field identifier
    $field_id = $1;
    if ($field_id eq "AU") { # Reverse the entry and remove the comma for authors
      # Reverse name
      my @name = split /,/, $2;
      print "field $1 --> content $name[1] $name[0]\n" if ($options{"v"});
      ${$hash_ref}{$field_id} = "$name[1] $name[0]";
    } else {
      ${$hash_ref}{$field_id} = $2;
      print "field $1 --> content $2\n" if ($options{"v"});
    }
  } elsif (/^\s+(.*)$/) { # No field id present
    if ($field_id eq "AU") { # Reverse the entry and remove the comma for authors
      # Reverse name and append
      my @name = split /,/, $1;
      print "field $field_id --> content $name[1] $name[0]\n" if ($options{"v"});
      ${$hash_ref}{$field_id} .= "%% "."$name[1] $name[0]";
    } else {
      # Append the entry
      ${$hash_ref}{$field_id} .= "%% ".$1;
      print "field $field_id --> content $1\n" if ($options{"v"});
    }
  } else { # Ay ay....
    warn "I should not be here... Ay mai...\n";
  }
}
##################################
sub prepare_article_entry {
  my $hash_ref = shift;
  my $LaTeX_output =  $latex_article_entry;
  # Authors
  my $authors = ${$hash_ref}{"AU"};
  $authors =~ s/%%/,/g;
  $LaTeX_output =~ s/AUTHORS/$authors/;
  # Title
  my $title = ${$hash_ref}{"TI"};
  $title =~ s/%%//g;
  $title =~ s/&/\\&/; # Escape & characters
  $LaTeX_output =~ s/TITLE/$title/;
  # Journal
  my $journal = ${$hash_ref}{"SO"};
  $journal =~ s/%%//g;
  $journal =~ s/&/\\&/;
  $LaTeX_output =~ s/JOURNAL/$journal/;
  # Año
  my $year = ${$hash_ref}{"PY"};
  $LaTeX_output =~ s/YEAR/$year/;
  # Volumen
  my $volume = ${$hash_ref}{"VL"};
  if ($volume) {
      $LaTeX_output =~ s/VOLUME/$volume/;
  } else { 
      $LaTeX_output =~ s/VOLUME/--/;
  }
  # Pages
  if (${$hash_ref}{"AR"}) {
    my $article_code = ${$hash_ref}{"AR"};
    $LaTeX_output =~ s/PAGES/$article_code/;
  } else {
    my $pages = ${$hash_ref}{"BP"}."-".${$hash_ref}{"EP"};
    $LaTeX_output =~ s/PAGES/$pages/;
  }
  # Times Cited
  my $times_cited =  ${$hash_ref}{"TC"};
  $LaTeX_output =~ s/CIT/$times_cited/;
  return $LaTeX_output;
}
##################################
sub prepare_other_entry {
  my $hash_ref = shift;
  my $LaTeX_output =  $latex_other_entry;
  # Authors
  my $authors = ${$hash_ref}{"AU"};
  $authors =~ s/%%/,/g;
  $LaTeX_output =~ s/AUTHORS/$authors/;
  # Title
  my $title = ${$hash_ref}{"TI"};
  $title =~ s/%%//g;
  $LaTeX_output =~ s/TITLE/$title/;
  # Journal
  my $journal = ${$hash_ref}{"SO"};
  $journal =~ s/%%//g;
  $LaTeX_output =~ s/JOURNAL/$journal/;
  # Event
  my $event = ${$hash_ref}{"SE"};
  if ($event) {
    $event =~ s/%%//g;
    $LaTeX_output =~ s/EVENT/$event/;
  } else {
    $LaTeX_output =~ s/EVENT/--/;
  }
  # Año
  my $year = ${$hash_ref}{"PY"};
  $LaTeX_output =~ s/YEAR/$year/;
  # Volumen
  my $volume = ${$hash_ref}{"VL"};
  if ($volume) {
      $LaTeX_output =~ s/VOLUME/$volume/;
  } else { 
      $LaTeX_output =~ s/VOLUME/--/;
  }
  # Pages
  if (${$hash_ref}{"AR"}) {
    my $article_code = ${$hash_ref}{"AR"};
    $LaTeX_output =~ s/PAGES/$article_code/;
  } else {
    if (${$hash_ref}{"BP"} or ${$hash_ref}{"EP"}) {
      my $pages = ${$hash_ref}{"BP"}."-".${$hash_ref}{"EP"};
      $LaTeX_output =~ s/PAGES/$pages/;
    } else {
      $LaTeX_output =~ s/PAGES/--/
    }
  }
  # Times Cited
  my $times_cited =  ${$hash_ref}{"TC"};
  $LaTeX_output =~ s/CIT/$times_cited/;
  #
  return $LaTeX_output;
}
